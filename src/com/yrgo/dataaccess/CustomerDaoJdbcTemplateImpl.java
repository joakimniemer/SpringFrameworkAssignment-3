package com.yrgo.dataaccess;

import com.yrgo.domain.Action;
import com.yrgo.domain.Call;
import com.yrgo.domain.Customer;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class CustomerDaoJdbcTemplateImpl implements CustomerDao {

    private static final String DELETE_SQL = "DELETE FROM TBL_CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String UPDATE_SQL = "UPDATE TBL_CUSTOMER SET COMPANYNAME=?, NOTES=?, EMAIL=?, TELEPHONE=? WHERE CUSTOMER_ID=?";
    private static final String INSERT_SQL = "INSERT INTO TBL_CUSTOMER (CUSTOMER_ID, COMPANYNAME, NOTES, EMAIL, TELEPHONE) VALUES (?,?,?,?,?)";
    private static final String GET_BY_ID = "SELECT CUSTOMER_ID, COMPANYNAME, NOTES, EMAIL, TELEPHONE FROM TBL_CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String GET_BY_COMPANYNAME = "SELECT CUSTOMER_ID, COMPANYNAME, NOTES, EMAIL, TELEPHONE FROM TBL_CUSTOMER WHERE COMPANYNAME=?";
    private static final String GET_ALL_CUSTOMERS = "SELECT * FROM TBL_CUSTOMER";
    private static final String ADD_CALL = "INSERT INTO TBL_CALL (CUSTOMER_ID, NOTES) VALUES (?,?)";
    private static final String GET_CALL_BY_ID = "SELECT NOTES FROM TBL_CALL WHERE CALLER_ID=?";


    private JdbcTemplate template;

    public CustomerDaoJdbcTemplateImpl(JdbcTemplate jdbcTemplate) {
        this.template = jdbcTemplate;
    }

    private void createTables() {
        try {
            this.template.update("CREATE TABLE TBL_CUSTOMER (CUSTOMER_ID VARCHAR(255), COMPANYNAME VARCHAR(255), NOTES VARCHAR(255), EMAIL VARCHAR(255), TELEPHONE VARCHAR(255))");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            System.out.println("Assuming the Customer table exists");
        }
        try {
            this.template.update("CREATE TABLE TBL_CALL (CALL_ID integer generated by default as identity (start with 1), CALLER_ID VARCHAR(255), NOTES VARCHAR(255), TIMEANDDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP)");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            System.out.println("Assuming the Call table exists");
        }
    }

    @Override
    public void create(Customer customer) {
        template.update(INSERT_SQL, customer.getCustomerId(), customer.getCompanyName(), customer.getNotes(), customer.getEmail(), customer.getTelephone());
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        List<Customer> customers = this.template.query(GET_BY_ID, new CustomerRowMapper(), customerId);
        if (customers.isEmpty()) {
            throw new RecordNotFoundException();
        }
        return customers.get(0);
    }

    @Override
    public List<Customer> getByName(String name) {
        return this.template.query(GET_BY_COMPANYNAME, new CustomerRowMapper(), name);
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        this.template.update(UPDATE_SQL, customerToUpdate.getCompanyName(), customerToUpdate.getNotes(), customerToUpdate.getEmail(),
                customerToUpdate.getTelephone(), customerToUpdate.getCustomerId());
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        this.template.update(DELETE_SQL, oldCustomer.getCustomerId());
    }


    @Override
    public List<Customer> getAllCustomers() {
        return this.template.query(GET_ALL_CUSTOMERS, new CustomerRowMapper());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
        List<Customer> customers = this.template.query(GET_BY_ID, new CustomerRowMapper(), customerId);
        if (customers.isEmpty()) {
            throw new RecordNotFoundException();
        }
        Customer customer = customers.get(0);
        List<Call> calls = this.template.query(GET_CALL_BY_ID, new CallRowMapper(), customerId);
        customer.setCalls(calls);
        return customer;
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
        List<Customer> customers = this.template.query(GET_BY_ID, new CustomerRowMapper(), customerId);
        if (customers.isEmpty()) {
            throw new RecordNotFoundException();
        }
        Customer customer = customers.get(0);
        List<Call> calls = customer.getCalls();
        calls.add(newCall);
        customer.setCalls(calls);
    }

    class CustomerRowMapper implements RowMapper<Customer> {
        public Customer mapRow(ResultSet rs, int arg1) throws SQLException {
            String customerId = rs.getString(1);
            String companyname = rs.getString(2);
            String notes = rs.getString(3);
            String email = rs.getString(4);
            String telephone = rs.getString(5);

            return new Customer("" + customerId, companyname, notes, email, telephone);
        }
    }

    class CallRowMapper implements RowMapper<Call> {
        public Call mapRow(ResultSet rs, int arg1) throws SQLException {
            String notes = rs.getString(3);

            return new Call("" + notes);
        }
    }
}
